apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
spec:
  description: >-
    SONAR_TOKEN env variable should be provided.

    The following task can be used to perform static analysis on the source code
    provided the SonarQube server is hosted
    SonarQube is the leading tool for continuously inspecting the Code Quality and Security
    of your codebases, all while empowering development teams. Analyze over 25 popular
    programming languages including C#, VB.Net, JavaScript, TypeScript and C++. It detects
    bugs, vulnerabilities and code smells across project branches and pull requests.
  workspaces:
    - name: source
  params:
    - name: SONAR_HOST_URL
      description: Host URL where the sonarqube server is running
      default: "https://sonarcloud.io"

    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
    - name: SONAR_PROJECT_NAME
      description: Project's unique key
      default: ""
    - name: SONAR_ORGANIZATION
      description: Sonar organization
      default: ""
    - name: SONAR_SCM
      description: Project's unique key
      default: "github"

    - name: SONAR_PR_BRANCH
      description: Project's unique key
      default: ""
    - name: SONAR_PR_BASE
      description: Project's unique key
      default: ""
    - name: SONAR_PR_KEY
      description: Project's unique key
      default: ""

    - name: SONAR_SECRET
      description: Name of sonar secret

    - name: REPO_OWNER
      description: repository owner
      default: ""
    - name: REPO_NAME
      description: repository name
      default: ""
    - name: WAIT_COMPLETION
      description: wait for sonar job completion
      default: "false"
  results:
    - name: url
      description: Sonar analys URL
  steps:
    - name: sonar-properties-create
      image: registry.access.redhat.com/ubi8/ubi-minimal:latest
      workingDir: $(workspaces.source.path)
      env:
        - name: SONAR_ORGANIZATION
          valueFrom:
            secretKeyRef:
              name: $(params.SONAR_SECRET)
              key: sonar-organization
        - name: SONAR_SCM_PROVIDER
          valueFrom:
            secretKeyRef:
              name: $(params.SONAR_SECRET)
              key: sonar-scm-provider
      script: |
        #!/usr/bin/env bash
        replaceValues() {
          filename=$1
          thekey=$2
          newvalue=$3
          if ! grep -R "^[#]*\s*${thekey}=.*" $filename >/dev/null; then
            echo "APPENDING because '${thekey}' not found"
            echo "" >>$filename
            echo "$thekey=$newvalue" >>$filename
          else
            echo "SETTING because '${thekey}' found already"
            sed -ir "s|^[#]*\s*${thekey}=.*|$thekey=$newvalue|" $filename
          fi
        }

        if [[ -f $(workspaces.source.path)/sonar-project.properties ]]; then
          if [[ -n "$(params.SONAR_HOST_URL)" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.host.url $(params.SONAR_HOST_URL)
          fi
          if [[ -n "$(params.SONAR_PROJECT_KEY)" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.projectKey $(params.SONAR_PROJECT_KEY)
          fi

          if [[ -n "$(params.SONAR_PROJECT_NAME)" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.projectName $(params.SONAR_PROJECT_NAME)
          fi

          if [[ -n "${SONAR_SCM_PROVIDER}" ]]; then
              replaceValues $(workspaces.source.path)/sonar-project.properties sonar.scm.provider ${SONAR_SCM_PROVIDER}
          fi

          if [[ -n "$(params.REPO_OWNER)"  && -n "$(params.REPO_NAME)" ]]; then
              replaceValues $(workspaces.source.path)/sonar-project.properties sonar.pullrequest.github.repository $(params.REPO_OWNER)/$(params.REPO_NAME)
          fi

          if [[ -n "${SONAR_ORGANIZATION}" ]]; then
              replaceValues $(workspaces.source.path)/sonar-project.properties sonar.organization ${SONAR_ORGANIZATION}
            else
              if [[ -n "$(params.SONAR_ORGANIZATION)" ]]; then
                replaceValues $(workspaces.source.path)/sonar-project.properties sonar.organization $(params.SONAR_ORGANIZATION)
              fi
          fi

          if [[ -n "$(params.SONAR_PR_BRANCH)" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.pullrequest.branch $(params.SONAR_PR_BRANCH)
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.pullrequest.base $(params.SONAR_PR_BASE)
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.pullrequest.key $(params.SONAR_PR_KEY)
          fi

        else
          touch sonar-project.properties
          echo "sonar.projectKey=$(params.SONAR_PROJECT_KEY)" >> sonar-project.properties
          echo "sonar.host.url=$(params.SONAR_HOST_URL)" >> sonar-project.properties
          echo "sonar.sources=." >> sonar-project.properties
        fi
        echo "---------------------------"
        cat $(workspaces.source.path)/sonar-project.properties

    - name: sonar-scan
      image: sonarsource/sonar-scanner-cli
      workingDir: $(workspaces.source.path)
      script: |
        sonar-scanner -Dsonar.login=${SONAR_TOKEN} > .sonar
        cat .sonar
        cat .sonar | grep "More about the report processing at" | grep -Eo '(http|https).+' > .status_link
        rm -rf .scannerwork
      env:
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.SONAR_SECRET)
              key: sonar-login

    - name: verify-sonar-status
      image: gcr.io/jenkinsxio/jx-cli:latest
      workingDir: $(workspaces.source.path)
      script: |
        if [[ -n "$(params.WAIT_COMPLETION)" ]]; then
          #!/usr/bin/env bash
          while !(curl -u $SONAR_TOKEN: -v --silent "$(cat .status_link)" --stderr - | grep '"status":"SUCCESS"' > /dev/null;)
          do
            sleep 1;
          done
          export ANALYSIS_ID=$(curl -u $SONAR_TOKEN: -v --silent "$(cat .status_link)" --stderr - | grep -Po '(?<="analysisId":")[^"\\]*(?:\\.[^"\\]*)*')
          curl -u $SONAR_TOKEN: -v --silent "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$ANALYSIS_ID&pullRequest=$SONAR_PR_KEY" > .quality_gate
          cat .quality_gate
          cat .quality_gate | grep -Po '(?<="projectStatus":{"status":")[^"\\]*(?:\\.[^"\\]*)*' > .status
          printf "\nStatus:"
          cat .status
          if [[ $(< .status) != "OK" ]]; then
            echo "Sonar status failed!"
            exit 1;
          fi
          echo "Sonar status successful!"
        else
          echo "Skip wait for completion..."
        fi
      env:
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.SONAR_SECRET)
              key: sonar-login
